AC_INIT(configure.in)

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(galaxy, 0.6)

AC_LANG_CPLUSPLUS
AC_PROG_CXX
AM_PROG_LIBTOOL

AC_CHECK_LIB(m,main)
AC_CHECK_LIB(z,main)
AC_CHECK_LIB(dl,main)

AC_CHECK_LIB(pthread,main)

#AC_CHECK_LIB(gslcblas,main)
LIBS="$LIBS -lgslcblas"
AC_caolan_CHECK_PACKAGE(gsl, main, gsl, gsl/gsl_fit.h,
   AC_MSG_RESULT([GNU Scientific Library found.]),
   AC_MSG_ERROR([GNU Scientific Library NOT found. Cannot continue - please compile and install GSL first.]) )

AC_caolan_CHECK_PACKAGE(libpeyton, main, peyton, astro/constants.h,
   AC_MSG_RESULT([libpeyton found.]),
   AC_MSG_ERROR([libpeyton NOT found]) )

AC_caolan_CHECK_PACKAGE(cfitsio, ffpss, cfitsio, fitsio.h,
   AC_MSG_RESULT([cfitsio found.]),
   AC_MSG_RESULT([cfitsio 2.4 or later NOT found]) )

AC_caolan_CHECK_PACKAGE(CCfits, main, CCfits, CCfits/CCfits,
   AC_MSG_RESULT([CCfits found.]),
   AC_MSG_RESULT([CCfits 2.4 or later NOT found. Not compiling FITS support.]) )

AC_caolan_CHECK_PACKAGE(nagc, main, nagc, nag.h,
   AC_MSG_RESULT([NAG C library found.]),
   AC_MSG_RESULT([NAG C library NOT found. Not compiling code which depends on nagc.]) )

RS_BOOST([1.33.0],
	[
	  CXXFLAGS="$CXXFLAGS $BOOST_CPPFLAGS"
	  AC_DEFINE(HAVE_BOOST, 1, Define if you have the package)
	],[
	  AC_MSG_RESULT([Boost C++ libraries NOT found. Omitting Boost dependent code.])
	])

RS_BOOST_IOSTREAMS(
	[
	  AC_MSG_RESULT([    - Boost.Iostreams found.])
          AC_DEFINE(HAVE_BOOST_IOSTREAMS, 1, Define if you have the package)
	],[
	  AC_MSG_RESULT([    - Boost.Iostreams NOT found. Omitting Boost.Iostreams dependent code.])
	])

RS_BOOST_REGEX(
	[
	  AC_MSG_RESULT([    - Boost.Regex found.])
          AC_DEFINE(HAVE_BOOST_REGEX, 1, Define if you have the package)
	],[
	  AC_MSG_RESULT([    - Boost.Regex NOT found. Omitting Boost.Regex dependent code.])
	])

AC_ARG_ENABLE(simulate,
 [  --enable-simulate  Enable compilation of simulate.x ],
 [
	simulate_x=yes
	AC_MSG_RESULT([Compiling full simulate.x])
 ])

if test "${simulate_x}" == yes; then
	AC_DEFINE(COMPILE_SIMULATE_X, 1, Define to compile simulate.x)
else
	AC_MSG_RESULT([NOT compiling simulate.x (leaving a stub)])
fi


########################
# Check for CUDA
# Taken from git://diracvideo.schleef.org/git/schroedinger.git
########################
AC_ARG_WITH([cuda],
    AS_HELP_STRING([--with-cuda=PATH],[prefix where cuda is installed [[default=no]]]),
    [],
    [with_cuda=no])
if test "x$with_cuda" = xyes; then
  AC_PATH_PROG([NVCC], [nvcc], no, [$PATH:/usr/local/cuda/bin])
  if test "x$NVCC" = xno ; then
    AC_MSG_FAILURE(["--with-cuda was give, but nvcc was not found"])
  fi
  with_cuda=`echo $NVCC|sed 's,bin/nvcc,,'`
fi

if test "x$with_cuda" != xno; then
  CUDA_CFLAGS="-I$with_cuda/include"
  CUDA_LIBS="-L$with_cuda/lib -lcudart"
  NVCC="$with_cuda/bin/nvcc"
  NVCCFLAGS="-O0 -g --device-emulation"
  HAVE_CUDA=yes
  AC_DEFINE(HAVE_CUDA, 1, [NVIDIA CUDA (GPU) support])
  AC_MSG_RESULT([CUDA found, compiling GPU support])
  CPPFLAGS="$CPPFLAGS -I$with_cuda/include"
else
  CUDA_CFLAGS=
  CUDA_LIBS=
  NVCC=
  NVCCFLAGS=
  HAVE_CUDA=no
fi
AC_SUBST(CUDA_CFLAGS)
AC_SUBST(CUDA_LIBS)
AC_SUBST(NVCC)
AC_SUBST(NVCCFLAGS)
AM_CONDITIONAL(HAVE_CUDA, test "x$HAVE_CUDA" = "xyes")

#####################

LIBS="$LIBS $BOOST_LIBS $CUDA_LIBS"
CPPFLAGS="-DDATADIR=\"\\\"\$(pkgdatadir)\\\"\" $CPPFLAGS"

AC_OUTPUT(Makefile data/Makefile src/Makefile src/common/Makefile src/gpc/Makefile)

# -L/usr/local/nag/cllux07ddl -lnurbsf -lmatrix -lmatrixN -lmatrixI -lGL -lGLU -llapack -lg2c -lnagc
